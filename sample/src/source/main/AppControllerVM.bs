import "pkg:/source/roku_modules/maestro/mx/BaseViewModel.brs"
namespace main
  class AppControllerVM extends mx.BaseViewModel

    public isFocusedOnContent = false
    public menuItems = []
    public currentItem
    public isMenuVisible = true

    private homeItem
    private optionsItem
    private isHomeLoaded
    private deeplinkingScreen
    private deeplinkingNavItem
    private isInDeeplinkMode = false
    private preDeeplinkingItem

    public function new()
      super("AppControllerVM")
      m.focusId = "tabMenu"
      m.menuItems = m.createMenuItems()
    end function

    override function initialize()
      super.initialize()
      if m.isDeeplinkingRequired(m.getInstance("appArgs"))
        m.log.info("deep linking is required")
        m.processDeeplinkingArgs(m.getInstance("appArgs"))
      else
        m.log.info("Going straigh to home - no deep linking")
        m.navigateToHomeItem()
      end if
    end function

    function createMenuItems()
      items = []
      m.homeItem = m.createNavItem("TODO", "TodoScreen")
      m.homeItem.isFocused = true
      items.push(m.homeItem)
      items.push(m.createNavItem("GRID", "GridScreen"))
      items.push(m.createNavItem("OPTIONS", "OptionsScreen"))
      return items
    end function

    function createNavItem(name, screenType, isOptionsMenu = false)
      return m.createSGNode("NavItem", invalid, screenType, {
        screenType: screenType
        name: name
        isOptionsItem: isOptionsMenu
      })
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Nav Menu Management
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    ' function onTabMenuCurrentItemChange(item)
    '   m.log.info("tab menu item changed", item)
    '   m.tabController@.changeCurrentItem(item)
    ' end function

    function navigateToHomeItem()
      m.currentItem = m.homeItem
      m.isHomeLoaded = true
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ binding callbacks
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    function onTabItemChange(value)
      m.log.info("selected tab item", value)
      m.currentItem = value
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Deep Linking
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function isDeeplinkingRequired(args)
      return args <> invalid and args.contentId <> invalid and args.contentId <> "" and args.mediaType <> invalid and args.mediaType <> ""
    end function

    function processDeeplinkingArgs(args)
      m.log.method("processDeeplinkingArgs", args)
      ' here you would have a task that does the work for you, being run in a roku promise
      'rokuPromise on a task here
      'here we're just hard coding it to a fake rsult

      item = createObject("roSGNode", "ContentNode")
      item.id = args.contentID
      item.title = "title " + args.contentID + " type " + args.mediaType

      collection = createObject("roSGNode", "ContentNode")
      collection.id = "c_" + args.contentID
      selection = createObject("roSGNode", "Selection")
      selection.currentItem = item
      selection.collection = collection

      if args.mediaType = "vod" or args.mediaType = "episode"
        action = "play"
      else
        action = "grid"
      end if

      deeplinkingData = {
        "isValid": true
        "selection": selection
        "mediaType": args.mediaType
        "action": action
      }
      m.onDeeplinkingTaskResult(deeplinkingData)
    end function

    function onDeeplinkingTaskResult(deepLinkingData)
      m.log.method("onDeeplinkingTaskResult deeplinkingData", deepLinkingData)

      m.setInstance("deeplinkingData", deepLinkingData)

      if deeplinkingData.isValid
        m.enterDeeplinking()
      else

        if not m.isHomeLoaded
          m.log.info("App must've done deep linking from lauch, loading home now")
          m.navigateToHomeItem()
        end if
      end if
    end function

    function enterDeeplinking()
      m.log.method("enterDeeplinking")
      m.isInDeeplinkMode = true
      m.preDeeplinkingItem = m.currentItem
      m.currentItem = m.deeplinkingNavItem
      m.toggleTabMenuVisible(false)
      m.setFocusId("tabController")
    end function

    function exitFromDeeplinking(args = invalid)
      m.log.method("exitFromDeeplinking")
      m.isInDeeplinkMode = false
      m.toggleTabMenuVisible(true)

      if m.preDeeplinkingItem <> invalid
        m.currentItem = m.preDeeplinkingItem
      else
        m.navigateToHomeItem()
      end if
      m.setFocusId("tabMenu")
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ App Services
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    'these are functions that the AppController provides to the app
    'via mixin/notification mechanism

    function playSelection(selection)
      m.log.info("playSelection")
      'this is a simple example - in my apps, the videoplayer is usually
      'long lived, and is an xml element in this view (i.e. AppController)
      m.setInstance("selection", selection)
      m.toggleVideoPlayerVisible(true)
    end function

    function toggleVideoPlayerVisible(isVisible, selection = invalid)
      m.toggleTabMenuVisible(not isVisible and not m.isInDeeplinkMode)

      if isVisible
        m.push(m.createSGnode("VideoPlayer", invalid, "videoPlayer"))
      else
        m.pop()
        m.setFocusId("tabController")
      end if
    end function


    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ app services impl
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function toggleTabMenuVisible(isVisible)
      m.log.info("toggleTabMenuVisible", isVisible)
      m.isMenuVisible = isVisible
    end function

    private function toggleFocusOnContent(focusOnContent)
      m.isFocusedOnContent = focusOnContent
      m.setFocusId(focusOnContent ? "tabController" : "tabMenu")
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Key Handling
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function onKeyPressDown() as boolean
      if not m.isFocusedOnContent
        m.toggleFocusOnContent(true)
      end if
      return true
    end function

    private function onKeyPressOk() as boolean
      m.toggleFocusOnContent(true)
      return true
    end function

    private function onKeyPressUp() as boolean
      m.toggleFocusOnContent(false)
      return true
    end function

    function onKeyPressOption() as boolean
      m.currentItem = m.optionsItem
      return true
    end function

    private function onKeyPressBack() as boolean
      m.toggleFocusOnContent(false)
      return true
    end function

  end class
end namespace