import "pkg:/source/view/ViewUtils.bs"
import "pkg:/source/core/Utils.bs"

namespace mv.cells

  @strict
  @lazy
  @node("mv_BaseCell", "Group")
  class BaseCell
    'todo - add code for various events here
    private style
    protected isViewCreated = false
    protected isFocused = false

    @observer("onContentChange")
    public itemContent as mc.types.Node

    public index = -1

    public rowIndex = -1

    @observer("onFocusPercentChange")
    public focusPercent = 0.0

    @observer("onRowHasFocusChange")
    public rowHasFocus = false

    @observer("onRowListHasFocusChange")
    public rowListHasFocus = false

    @observer("onRowFocusChange")
    public rowFocusPercent = 0.0

    private owner

    private willChangeFocusReported = false

    protected function onContentChange(content)
      if m.top.index = 0
        'let's store the owning markup grid for this row
        rowList = m.top.getParent().getParent().getParent()
        rowList.rowMap@.set(m.top.rowIndex.toStr().trim(), m.top.getParent())
      end if

      if not m.isViewCreated
        m.createView()
      end if
      if content <> invalid
        m.owner = content.getParent().getParent().getParent()
      end if
    end function

    protected function onRowHasFocusChange(focused) as void
    end function

    protected function onRowListHasFocusChange(focused) as void
    end function

    private function onRowFocusChange(percent) as void
    end function

    private function onFocusPercentChange(percent) as void

      if percent = 1
        m.isFocused = true
        m.owner.lastFocusIndex = m.top.index
        m.onGainedFocus(m.owner.direction)
        m.willChangeFocusReported = false
        return
      else if percent = 0
        m.isFocused = false
        m.onLostFocus(m.owner.direction)
        m.willChangeFocusReported = false
        return
      end if

      if m.owner.lastFocusIndex < m.top.index
        m.owner.direction = 1
      else if m.owner.lastFocusIndex > m.top.index
        m.owner.direction = -1
      end if

      if m.isFocused
        if not m.willChangeFocusReported
          m.onWillLoseFocus(m.owner.direction)
        end if
        m.onLosingFocus(percent, m.owner.direction)
      else
        if not m.willChangeFocusReported
          m.onWillGainFocus(m.owner.direction)
        end if
        m.onGainingFocus(percent, m.owner.direction)
      end if
    end function

    private function createView()
      m.style = mv.getFieldInParent(m.itemContent, "_style")
      m._createView()
      m.isViewCreated = true
    end function

    protected function _createView()
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ focus management
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected function onLostFocus(direction)
    end function

    protected function onGainedFocus(direction)
    end function

    protected function onGainingFocus(percent, direction)
    end function

    protected function onLosingFocus(percent, direction)
    end function
    protected function onWillLoseFocus(direction)
    end function

    protected function onWillGainFocus(direction)
    end function
  end class
end namespace