namespace tests
  @suite("StyleManager tests")
  class StyleManagerTests extends mv.tests.BaseTestSuite

    private manager
    private nodeGlobal
    private nodeTop
    private testData = {
      "comp1": {
        "fontKey": "a,10,true,false"
        "width": 100
        "height": 100
      }
      "comp2": {
        "translation": [100, 100]
      }
    }

    protected override function beforeEach()
      m.nodeGlobal = new rooibos.utils.MockNode()
      m.nodeTop = new rooibos.utils.MockNode()
      m.manager = new mv.StyleManager()
      m.manager.setStyleJson(m.testData)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("tests constructor")
    ' +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("initializes")
    function _()
      m.manager = new mv.StyleManager()
      m.assertEmpty(m.manager.styles)
      m.assertEmpty(m.manager.cachedStyles)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("tests setStyleJson")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("handles bad values")
    @params(invalid)
    @params([])
    function _(value)
      m.manager.setStyleJson(value)
      m.assertEmpty(m.manager.styles)
      m.assertEmpty(m.manager.cachedStyles)
    end function

    @it("handles valid json")
    function _()
      m.manager.setStyleJson(m.testData)
      m.assertEqual(m.manager.styles, m.testData)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("tests getStyle")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("returns empty for unknown keys")
    @params(invalid)
    @params("notThere")
    function _(name)
      m.assertEmpty(m.manager.getStyle(name))
    end function

    @it("handles valid values")
    function _()
      m.manager.setStyleJson(m.testData)

      m.assertEqual(m.manager.getStyle("comp1"), m.testData.comp1)
      m.assertEqual(m.manager.getStyle("comp2"), m.testData.comp2)
    end function

    @it("caches values")
    function _()
      m.assertEmpty(m.manager.cachedStyles)

      m.assertEqual(m.manager.getStyle("comp1"), m.testData.comp1)
      m.assertEqual(m.manager.cachedStyles.comp1, m.testData.comp1)

      m.assertEqual(m.manager.getStyle("comp2"), m.testData.comp2)
      m.assertEqual(m.manager.cachedStyles.comp2, m.testData.comp2)

      m.expectNone(m.manager, "parseStyle")

      m.assertEqual(m.manager.getStyle("comp1"), m.testData.comp1)
      m.assertEqual(m.manager.getStyle("comp2"), m.testData.comp2)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("nested styles")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @beforeEach
    function nestedStyles_beforeEach()
      m.testData = {
        "colors": {
          "primary": "cp"
          "primary-focused": "cpf"
          "secondary": "cs"
        }
        "text": {
          "primary": {
            "fontKey": "fkp"
            "color": "~colors.primary"
          }
          "primary-focused": {
            "fontKey": "fkpf"
            "color": "~colors.primary-focused"
          }
          "secondary": {
            "fontKey": "fks"
            "color": "~colors.secondary"
          }
          "secondary-focused": {
            "fontKey": "fksf"
            "color": "~colors.secondary-focused"
          }
          "broken-nested": {
            "fontKey": "fkbn"
            "color": "~colors.not-there"
          }
        }
        "comp1": {
          "textStyle": "~text.primary"
          "highlightedTextStyle": "~text.primary-focused"
          "translation": [100, 100]
        }
        "comp2": {
          "textStyle": "~text.primary"
          "highlightedTextStyle": "~text.primary-focused"
          "subtitleTextStyle": "~text.secondary"
          "translation": [100, 100]
        }
        "comp3": {
          "textStyle": "~text.broken"
          "highlightedTextStyle": "~broken.primary"
          "subtitleTextStyle": "~text.broken-nested"
          "translation": [100, 100]
        }
      }


      m.nodeGlobal = new rooibos.utils.MockNode()
      m.nodeTop = new rooibos.utils.MockNode()
      m.manager = new mv.StyleManager()
      m.manager.setStyleJson(m.testData)
    end function

    @it("composes nested styles together")
    function _()
      comp1Style = m.manager.getStyle("comp1")
      m.assertEqual(comp1Style, {
        translation: [100, 100]
        textStyle: {
          "fontKey": "fkp"
          "color": "cp"
        }
        highlightedTextStyle: {
          "fontKey": "fkpf"
          "color": "cpf"
        }
      })

      comp2Style = m.manager.getStyle("comp2")
      m.assertEqual(comp2Style, {
        translation: [100, 100]
        textStyle: {
          "fontKey": "fkp"
          "color": "cp"
        }
        highlightedTextStyle: {
          "fontKey": "fkpf"
          "color": "cpf"
        }
        subtitleTextStyle: {
          "fontKey": "fks"
          "color": "cs"
        }
      })

    end function

    @it("logs warning when nested styles are missing - but leaves key intact")
    function _()
      comp3Style = m.manager.getStyle("comp3")
      m.assertEqual(comp3Style, {
        "highlightedTextStyle": "~broken.primary"
        "subtitleTextStyle": {
          "color": "~colors.not-there"
          "fontKey": "fkbn"
        }
        "textStyle": "~text.broken"
        "translation": [100, 100]
      })
    end function

  end class
end namespace