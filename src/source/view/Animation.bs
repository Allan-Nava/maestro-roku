import "pkg:/source/roku_modules/log/LogMixin.brs"
import "pkg:/source/core/Utils.bs"

namespace mv.animations.utils
  function fadeTo(target, duration, toValue, start = true, delay = 0)
    anim = new mv.animations.Fade(target, duration, target.opacity, toValue, delay)
    if start
      anim.start()
    end if
    return anim
  end function

  function scaleTo(target, duration, toValue, start = true, delay = 0)
    anim = new mv.animations.Scale(target, duration, target.scale, toValue, delay)
    if start
      anim.start()
    end if
    return anim
  end function

  function moveTo(target, duration, toValue, start = true, delay = 0)
    anim = new mv.animations.Move(target, duration, target.translation, toValue, delay)
    if start
      anim.start()
    end if
    return anim
  end function

  function getDelta(fromValue, toValue)
    if mc.isPoint(fromValue) and mc.isPoint(toValue)
      return abs((fromValue[0] + fromValue [1]) - (toValue[0] + toValue[1]))
    else if mc.isNumber(fromValue) and mc.isNumber(toValue)
      return abs(fromValue - toValue)
    else
      return 0
    end if
  end function
end namespace

namespace mv.animations
  class AnimationBase
    public node
    public repeat
    private parentAnimation

    function new(name, target)
      m.log = new log.Logger(name)
      if target = invalid or target.id = invalid or target.id = ""
        m.log.error("target must be a valid node with an id")
      end if
      m.target = target
    end function

    function setControl(control)
      m.control = control
      m.node.control = control
    end function

    function start(resume = false)
      m.setControl(resume ? "resume" : "start")
    end function

    function pause()
      m.setControl("pause")
    end function

    function stop(finish = false)
      m.setControl(finish ? "finish": "stop")
    end function

    function setRepeat(repeat)
      m.repeat = repeat
      m.node.repeat = repeat
    end function

    public function destroy()
      if m.node <> invalid
        m.node.getParent().removeChild(m.node)
      end if
    end function

    public function clone()
      'override me
      return invalid
    end function

  end class

  class AbstractAnimation extends mv.animations.AnimationBase
    public target
    public interpolator
    private keys = [0, 1]
    private keyValues = invalid
    private easeFunction = "linear"
    private delay = 0
    private field = invalid
    public duration = 0.5
    private fractionValueObserver
    public animateFromCurrentValue = false 'if true, the animation will always take the current value, irrespective of from value


    function new(target, field, duration, fromValue, toValue, name = "AbstractAnimation", delay = 0)
      super(name, target)
      if target = invalid or target.id = invalid or target.id = ""
        m.log.error("target must be a valid node with an id")
      end if

      m.target = target
      m.duration = duration
      m.fromValue = fromValue
      m.toValue = toValue
      m.field = field
      m.createAnimationNode()
      m.setDelay(delay)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ public api
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function setEaseFunction(easeFunction)
      m.easeFunction = easeFunction
      m.node.easeFunction = easeFunction
    end function

    function setAnimateFromCurrentValue(value)
      m.animateFromCurrentValue = value
    end function

    function setKeys(keys, keyValues)
      if not mc.isArray(keys)
        m.log.error("received invalid keys", keys)
      end if
      if not mc.isArray(keyValues)
        m.log.error("received invalid keys", keyValues)
      end if
      if keys.count() <> keyValues.count()
        m.log.error("keys have different count from keyValues", keys.count(), keyValues.count())
      end if

      for each value in keyValues
        if not m.isValidValue(value)
          m.log.error("tried to set illegal value in keyValues value: ", value)
        end if
      end for
      m.interpolator.key = keys
      m.interpolator.keyValue = keyValues
    end function

    function syncStartKeys()
      if m.interpolator.keyValue <> invalid and m.interpolator.keyValue.count() > 0
        m.log.info("setting start keys to ")
        mc.setNodeArrayValue(m.interpolator, "keyValue", 0, m.target[m.field])
      end if
    end function

    override function start(resume = false)
      if m.fractionValueObserver <> invalid
        m.fractionValueObserver.reset()
      end if

      if m.animateFromCurrentValue
        m.syncStartKeys()
      end if
      super.start(resume)
    end function

    function setDuration(duration)
      m.duration = duration
      if m.node <> invalid
        m.node.duration = duration
      end if
    end function

    function setDelay(delay)
      m.delay = delay
      if m.node <> invalid
        m.node.delay = delay
      end if
    end function

    function animateTo(toValue, duration = invalid)

      if m.node.control = "start" or m.node.control = "resume"
        wasPlaying = true
        m.pause()
      else
        wasPlaying = false
      end if

      if duration = invalid
        duration = m.duration
      end if
      m.setDuration(duration)
      m.setFromToValue(m.target[m.field], toValue)
      if wasPlaying = true
        m.start()
      end if
    end function

    ' /**
    '  * @member modifyAnimateTo
    '  * @memberof module:animations.AbstractAnimation
    '  * @instance
    '  * @function
    '  * @description estimates how much time is required to complete the animation given the current delta particularly useful when having to switch destination on the fly.
    '  * @param {any} toValue - the final value
    '  * @param {float} stepSpeed - how long the animation would normally take
    '  * @param {string} stepUnit - "pixel" (30 pixels), "float", 1
    '  */
    function animateToWithSpeed(toValue, stepSpeed, stepUnit = "pixel")
      stepSize = stepUnit = "pixel" ? 30 : 0.1
      delta = mv.animations.utils.getDelta(m.target[m.field], toValue)
      steps = delta / stepSize
      m.animateTo(toValue, steps * stepSpeed)
    end function

    function setFromToValue(fromValue, toValue)
      if m.isValidValue(toValue) and m.isValidValue(fromValue)
        m.fromValue = fromValue
        m.toValue = toValue
        ' m.log.info("fromValue", fromValue, "toValue", toValue)
        m.interpolator.keyValue = [fromValue, toValue]
      else
        m.log.error("tried to set invalid fromValue or toValue [", fromValue, ",", toValue, "]")
      end if
    end function

    function jumpToEnd()
      m.stop()
      m.target[m.field] = m.toValue
    end function

    function observeFraction(callback, scope = invalid)
      mc.tasks.observeNodeField(m.interpolator, "fraction", callback, "value", false, scope)
    end function

    function observeState(callback, scope = invalid)
      mc.tasks.observeNodeField(m.node, "state", callback, "value", false, scope)
    end function

    function unobserveFraction()
      mc.tasks.cleanNodeObserver(m.interpolator, "fraction")
    end function

    function unobserveState()
      mc.tasks.cleanNodeObserver(m.node, "state")
    end function

    function onFraction(fraction, func, scope)
      if m.fractionValueObserver = invalid
        m.fractionValueObserver = new mc.tasks.ValueObserver(m.interpolator, "fraction", scope)
      end if
      m.fractionValueObserver.onValue(fraction, func, ">=")
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ private impl
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function createAnimationNode()
      m.node = createObject("roSGNode", "Animation")
      animId = mv.animations.getAnimationKeyId()
      'bs:disable-next-line
      m.node.id = `${m.target.id}_${m.field}_${animId}`
      m.node.duration = m.duration
      m.node.delay = m.delay
      m.node.easeFunction = m.easeFunction
      m.node.repeat = m.repeat
      m.target.appendChild(m.node)
      m.createInterpolator()
      m.node.appendChild(m.interpolator)
    end function

    private function createInterpolator()
      m.log.error("createAnimationNode must be implemented")
    end function

    function _createInterpolator(interpolatorType)
      m.interpolator = createObject("roSGNode", interpolatorType)
      animId = mv.animations.getAnimationKeyId()
      'bs:disable-next-line
      m.interpolator.id = `${m.target.id}_i_${m.field}_${animId}`
      m.interpolator.fieldToInterp = `${m.target.id}.${m.field}`
      m.setKeys([0, 1], [m.fromValue, m.toValue])
    end function

  end class

  class Parallel extends mv.animations.AnimationBase
    public animations
    public delay = 0
    public animateFromCurrentValue = false 'if true, the animation will always take the current value, irrespective of from value

    function new(target, animations = invalid, repeat = false, delay = 0)
      super("ParallelAnimation", target)
      m.node = createObject("roSGNode", "ParallelAnimation")
      animId = mv.animations.getAnimationKeyId()
      m.node.delay = delay
      'bs:disable-next-line
      m.node.id = `${m.target.id}_${m.parallel}_${animId}`
      m.setRepeat(repeat)
      if animations <> invalid
        m.addAnimations(animations)
      end if
      m.target.appendChild(m.node)
    end function

    function setAnimateFromCurrentValue(value)
      m.animateFromCurrentValue = value
      for each animation in m.animations
        animation.setAnimateFromCurrentValue(value)
      end for
    end function

    override function syncStartKeys()
      for each animation in m.animations
        m.log.debug("setting animation start values for field ", animation.field)
        animation.syncStartKeys()
      end for
    end function

    override function start(resume = false)
      if m.animateFromCurrentValue
        m.syncStartKeys()
      end if
      super.start(resume)
    end function


    public override function clone()
      animations = []
      for each anim in m.animations
        animations.push(anim.clone())
      end for
      return new mv.animations.Parallel(m.target, animations, m.repeat, m.delay)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ public api
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function addAnimations(animations)
      m.animations = []
      for each animation in animations
        if animation <> invalid and type(animation.node) = "roSGNode"
          animation.parentAnimation = m.node
          if m.delay <> 0
            animation.setDelay(m.delay)
          end if
          m.node.appendChild(animation.node)
          m.animations.push(animation)
        end if
      end for
    end function

    public override function destroy()
      for each animation in m.animations
        animation.destroy()
      end for
    end function

    function observeState(callback, scope = invalid)
      mc.tasks.observeNodeField(m.node, "state", callback, "value", false, scope)
    end function

    function unobserveState()
      mc.tasks.cleanNodeObserver(m.node, "state")
    end function

    function jumpToEnd()
      for each animation in m.animations
        animation.jumpToEnd()
      end for
    end function
  end class

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ animation subclasses
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  class Scale extends mv.animations.AbstractAnimation
    function new(target, duration, fromValue, toValue, delay = 0)
      super(target, "scale", duration, fromValue, toValue, "ScaleAnimation", delay)
    end function

    override function createInterpolator()
      m._createInterpolator("Vector2DFieldInterpolator")
    end function

    override function isValidValue(value)
      return mc.isPoint(value)
    end function

    public override function clone()
      return new mv.animations.Scale(m.target, m.duration, m.fromValue, m.toValue, m.delay)
    end function

  end class

  class Fade extends mv.animations.AbstractAnimation
    function new(target, duration, fromValue, toValue, delay = 0)
      super(target, "opacity", duration, fromValue, toValue, "FadeAnimation", delay)
    end function

    override function createInterpolator()
      m._createInterpolator("FloatFieldInterpolator")
    end function

    override function isValidValue(value)
      return mc.isNumber(value) and value >= 0 and value <= 1
    end function

    public override function clone()
      return new mv.animations.Fade(m.target, m.duration, m.fromValue, m.toValue, m.delay)
    end function
  end class

  class Move extends mv.animations.AbstractAnimation
    function new(target, duration, fromValue, toValue, delay = 0)
      super(target, "translation", duration, fromValue, toValue, "MoveAnimation", delay)
    end function

    override function createInterpolator()
      m._createInterpolator("Vector2DFieldInterpolator")
    end function

    override function isValidValue(value)
      return mc.isPoint(value)
    end function

    public override function clone()
      return new mv.animations.Move(m.target, m.duration, m.fromValue, m.toValue, m.delay)
    end function

  end class

  class Size extends mv.animations.AbstractAnimation
    private wAnim
    private hAnim

    function new(target, duration, fromValue, toValue, delay = 0)
      super(target, "size", duration, fromValue, toValue, "SizeAnimation", delay)
      m.wAnim = new mv.animations.FloatValue(target, "width", duration, fromValue[0], toValue[0])
      m.hAnim = new mv.animations.FloatValue(target, "height", duration, fromValue[1], toValue[1])
      m.pAnim = new mv.animations.Parallel(target, [
        m.wAnim,
        m.hAnim
      ])
      m.node = m.pAnim.node

    end function

    public override function clone()
      return new mv.animations.Size(m.target, m.duration, m.fromValue, m.toValue, m.delay)
    end function

    private override function createAnimationNode()
    end function

    override function setEaseFunction(easeFunction)
      m.easeFunction = easeFunction
      m.wAnim.setEaseFunction(easeFunction)
      m.hAnim.setEaseFunction(easeFunction)
    end function

    override function setKeys(keys, keyValues)
      wKeys = []
      hKeys = []
      for each keyValue in keyValues
        wKeys.push(keyValue[0])
        hKeys.push(keyValue[1])
      end for
      m.wAnim.setKeys(keys, wKeys)
      m.hAnim.setKeys(keys, hKeys)

    end function

    override function setDuration(duration)
      m.wAnim.setDuration(duration)
      m.hAnim.setDuration(duration)
      m.duration = duration
    end function

    override function setDelay(delay)
      m.delay = delay
      if m.wAnim <> invalid
        m.wAnim.setDelay(delay)
        m.hAnim.setDelay(delay)
      end if
    end function

    override function animateTo(toValue, duration = invalid)
      m.wAnim.animateTo(toValue[0], duration)
      m.hAnim.animateTo(toValue[1], duration)
    end function

    override function animateToWithSpeed(toValue, stepSpeed, stepUnit = "pixel")
      m.wAnim.animateToWithSpeed(toValue[0], stepSpeed, stepUnit)
      m.hAnim.animateToWithSpeed(toValue[1], stepSpeed, stepUnit)
    end function

    override function setFromToValue(fromValue, toValue)
      m.wAnim.setFromToValue(fromValue[0], toValue[1])
      m.hAnim.setFromToValue(fromValue[0], toValue[1])
    end function

    override function observeFraction(callback, scope = invalid)
      m.wAnim.observeFraction(callback, scope)
    end function

    override function unobserveFraction()
      m.wAnim.unobserveFraction()
    end function
  end class

  class KenBurns extends mv.animations.AbstractAnimation
    private sAnim
    private mAnim
    private maxScale

    function new(target, duration, maxScale, delay = 0)
      super(target, "size", duration, invalid, invalid, "SizeAnimation", delay)
      m.maxScale = maxScale
      m.sAnim = mv.animations.utils.scaleTo(target, duration, target.scale, false, delay)
      m.mAnim = mv.animations.utils.moveTo(target, duration, target.translation, false, delay)
      m.pAnim = new mv.animations.Parallel(target, [
        m.sAnim,
        m.mAnim
      ])
      m.node = m.pAnim.node
    end function

    public override function clone()
      return new mv.animations.KenBurns(m.target, m.duration, m.maxScale, m.delay)
    end function

    private override function createAnimationNode()
    end function

    override function setEaseFunction(easeFunction)
      m.easeFunction = easeFunction
      m.sAnim.setEaseFunction(easeFunction)
      m.mAnim.setEaseFunction(easeFunction)
    end function

    override function setKeys(keys, keyValues)
    end function

    override function setDuration(duration)
      m.sAnim.setDuration(duration)
      m.mAnim.setDuration(duration)
      m.duration = duration
    end function

    override function setDelay(delay)
      m.delay = delay
      if m.sAnim <> invalid
        m.sAnim.setDelay(delay)
        m.mAnim.setDelay(delay)
      end if
    end function

    override function animateTo(toValue, duration = invalid)
      m.sAnim.animateTo(toValue[0], duration)
      m.mAnim.animateTo(toValue[1], duration)
    end function

    override function animateToWithSpeed(toValue, stepSpeed, stepUnit = "pixel")
      m.sAnim.animateToWithSpeed(toValue[0], stepSpeed, stepUnit)
      m.mAnim.animateToWithSpeed(toValue[1], stepSpeed, stepUnit)
    end function

    override function setFromToValue(fromValue, toValue)
    end function

    override function observeFraction(callback, scope = invalid)
      m.sAnim.observeFraction(callback, scope)
    end function

    override function unobserveFraction()
      m.sAnim.unobserveFraction()
    end function

    override function jumpToEnd()
      for each animation in animations
        animation.jumpToEnd()
      end for
    end function

    function ceil(number)
      return - int(- number)
    end function

    function floor(number)
      return int(number)
    end function

    override function start()
      super.start()
      endScale = mc.clamp(rnd(0) + 1, 1.1, m.maxScale)
      startScale = mc.clamp(rnd(0) + 1, 1.1, m.maxScale)
      fromScale = [
        startScale,
        startScale
      ]
      toScale = [
        endScale,
        endScale
      ]
      m.target.scale = fromScale
      m.sAnim.setFromToValue(fromScale, toScale)
      corners = [{ x: 0, y: 0 }, { x: 1, y: 0 }, { x: 0, y: 1 }, { x: 1, y: 1 }]

      if m.target.width <> invalid
        w = m.target.width
      else
        w = 1
      end if
      if m.target.height <> invalid
        h = m.target.height
      else
        h = 1
      end if

      sw = w - h * startScale
      sh = h - w * startScale
      xAmount = (rnd(sw) - sw / 2) * 0.25
      yAmount = (rnd(sh) - sh / 2) * 0.25
      'Pick the first corner. Remove it from the array
      choice = m.floor(rnd(3))
      sCorner = corners[choice]
      'Pick the second corner from the subset
      corners.delete(choice)
      eCorner = corners[m.floor(rnd(2))]
      fromPos = [
        sCorner.x * xAmount
        sCorner.y * yAmount
      ]
      sw = w - h * endScale
      sh = h - w * endScale
      xAmount = (rnd(sw) - sw / 2) * 0.25
      yAmount = (rnd(sh) - sh / 2) * 0.25
      'Pick the first corner. Remove it from the array
      choice = m.floor(rnd(3))
      sCorner = corners[choice]

      toPos = [
        eCorner.x * xAmount
        eCorner.y * yAmount
      ]
      fromPos = [mc.clamp(fromPos[0], -30, 0), mc.clamp(fromPos[1], -30, 0)]
      m.target.translation = fromPos
      m.mAnim.setFromToValue(fromPos, toPos)
    end function
  end class


  class FloatValue extends mv.animations.AbstractAnimation
    function new(target, field, duration, fromValue, toValue, delay = 0)
      super(target, field, duration, fromValue, toValue, "FloatAnimation", delay)
    end function

    override function createInterpolator()
      m._createInterpolator("FloatFieldInterpolator")
    end function

    override function isValidValue(value)
      return mc.isNumber(value)
    end function

    public override function clone()
      return new mv.animations.FloatValue(m.target, m.duration, m.fromValue, m.toValue, m.delay)
    end function

  end class


  class VectorValue extends mv.animations.AbstractAnimation
    function new(target, field, duration, fromValue, toValue, delay = 0)
      super(target, field, duration, fromValue, toValue, "VectorValueAnimation", delay)
    end function

    override function createInterpolator()
      m._createInterpolator("Vector2DFieldInterpolator")
    end function

    override function isValidValue(value)
      return mc.isNumber(value)
    end function

    public override function clone()
      return new mv.animations.VectorValue(m.target, m.duration, m.fromValue, m.toValue, m.delay)
    end function

  end class

  class Sequence extends mv.animations.AnimationBase
    public animations
    public delay = 0
    public animateFromCurrentValue = false 'if true, the animation will always take the current value, irrespective of from value

    function new(target, animations = invalid, repeat = false, delay = 0)
      super("SequenceAnimation", target)
      m.node = createObject("roSGNode", "SequentialAnimation")
      animId = mv.animations.getAnimationKeyId()
      m.setDelay(delay)
      'bs:disable-next-line
      m.node.id = `${m.target.id}_${m.sequence}_${animId}`
      m.setRepeat(repeat)
      if animations <> invalid
        m.addAnimations(animations)
      end if
      m.target.appendChild(m.node)
    end function

    function setAnimateFromCurrentValue(value)
      m.animateFromCurrentValue = value
      for each animation in m.animations
        animation.setAnimateFromCurrentValue(value)
      end for
    end function

    override function syncStartKeys()
      for each animation in m.animations
        m.log.debug("setting animation start values for field ", animation.field)
        animation.syncStartKeys()
      end for
    end function

    override function start(resume = false)
      if m.animateFromCurrentValue
        m.syncStartKeys()
      end if

      super.start(resume)
    end function

    public override function clone()
      animations = []
      for each anim in m.animations
        animations.push(anim.clone())
      end for
      return new mv.animations.Sequence(m.target, animations, m.repeat, m.delay)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ public api
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function addAnimations(animations)
      m.animations = []
      for each animation in animations
        if animation <> invalid and type(animation.node) = "roSGNode"
          animation.parentAnimation = m.node
          if m.delay <> 0
            animation.setDelay(m.delay)
          end if
          m.node.appendChild(animation.node)
          m.animations.push(animation)
        end if
      end for
    end function

    public override function destroy()
      for each animation in m.animations
        animation.destroy()
      end for
    end function

    function observeState(callback, scope = invalid)
      mc.tasks.observeNodeField(m.node, "state", callback, "value", false, scope)
    end function

    function unobserveState()
      mc.tasks.cleanNodeObserver(m.node, "state")
    end function

    function jumpToEnd()
      for each animation in m.animations
        animation.jumpToEnd()
      end for
    end function
  end class


  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ private utils
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


  function getAnimationKeyId()
    if m.global.__manimKey = invalid
      m.global.addFields({ __manimKey: 0 })
    end if
    m.global.__manimKey++
    return m.global.__manimKey
  end function
end namespace