' /**
'  * @member Dicationry
'  * @memberof module:Set
'  * @instance
'  * @function
'  * @description light node wrapper around a Set to stop copies
'  */
namespace mc.collections
  @node("Array", "Node")
  class Array

    protected data = []
    public length = 0

    @observer("onDebugChange")
    public _debug = false

    public __contents as mc.types.Array

    public function clear()
      m.data = {}
      m.top.length = 0
      m.top._debug = invalid
    end function

    public function push(value)
      m.data.push(value)
      m.top.length = m.data.count()
    end function

    public function append(other)
      m.data.append(other)
      m.top.length = m.data.count()
    end function

    public function get(key)
      return m.data[key]
    end function

    public function remove(key)
      m.data.delete(key)
      m.top.length = m.data.count()
    end function

    public function doesExist(value)
      return m.getIndex(value) <> -1
    end function

    public function getValues()
      return m.data
    end function

    public function getIndex(value)
      for i = 0 to m.data.count() - 1
        if item = value
          return i
        end if
      end for
      return -1
    end function

    private function onDebugChange(value)
      m.top.contents = m.data
    end function
  end class
end namespace