
namespace mc.collections
  ' /**
  '  * @module Map
  '  * @description simple map to prevent excess copies when accessing sets of data
  '  */
  @node("mc_Map", "Node")
  class Map

    private top
    protected data

    @field("boolean")
    @observer("onDebugChange")
    public _debug

    @field("assocarray")
    public __contents

    @field("integer")
    public length = 0

    function new(globalNode, top)
      m.data = {}
      m.top = top
    end function

    @nodefunc
    function clear()
      m.data = {}
      m.top.length = 0
    end function

    @nodefunc
    function delete(key)
      m.data.delete(key)
      m.top.length = m.data.count()
    end function

    @nodefunc
    function set(key, value)
      m.data[key] = value
      m.top.length = m.data.count()
    end function

    @nodefunc
    function append(other)
      m.data[key].append(other)
      m.top.length = m.data.count()
    end function

    @nodefunc
    function get(key)
      return m.data[key]
    end function

    @nodefunc
    function doesExist(key)
      return m.data[key] <> invalid
    end function

    @nodefunc
    function getValues()
      return m.data
    end function

    function onDebugChange(value)
      ? "dumping contents"
      m.top.__contents = m.data
    end function
  end class
end namespace